package cmd

import (
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"sync"
	"xnetperf/config"

	"github.com/spf13/cobra"
)

var collectCmd = &cobra.Command{
	Use:   "collect",
	Short: "Collect report files from remote hosts",
	Long: `Collect report JSON files generated by ib_write_bw from all configured hosts
and organize them in local reports directory by hostname.`,
	Run: func(cmd *cobra.Command, args []string) {
		cfg, err := config.LoadConfig(cfgFile)
		if err != nil {
			fmt.Printf("Error reading config: %v\n", err)
			os.Exit(1)
		}

		if !cfg.Report.Enable {
			fmt.Println("Report is not enabled in config. No files to collect.")
			return
		}

		collectReports(cfg)
	},
}

func collectReports(cfg *config.Config) {
	// 创建本地reports目录
	reportsDir := "reports"
	err := os.MkdirAll(reportsDir, 0755)
	if err != nil {
		fmt.Printf("Error creating reports directory: %v\n", err)
		return
	}

	// 获取所有主机列表
	allHosts := make(map[string]bool)
	for _, host := range cfg.Server.Hostname {
		allHosts[host] = true
	}
	for _, host := range cfg.Client.Hostname {
		allHosts[host] = true
	}

	var wg sync.WaitGroup
	fmt.Printf("Collecting reports from %d hosts...\n", len(allHosts))

	for hostname := range allHosts {
		wg.Add(1)
		go func(host string) {
			defer wg.Done()
			collectFromHost(host, cfg.Report.Dir, reportsDir)
		}(hostname)
	}

	wg.Wait()
	fmt.Printf("Report collection completed. Files saved to '%s' directory.\n", reportsDir)
}

func collectFromHost(hostname, remoteDir, localBaseDir string) {
	// 为每个主机创建本地子目录
	hostDir := filepath.Join(localBaseDir, hostname)
	err := os.MkdirAll(hostDir, 0755)
	if err != nil {
		fmt.Printf("Error creating directory for host %s: %v\n", hostname, err)
		return
	}

	fmt.Printf("-> Collecting reports from %s...\n", hostname)

	// 使用scp递归复制所有JSON报告文件
	// scp -r hostname:remoteDir/*.json localDir/
	scpCmd := fmt.Sprintf("%s/*.json", remoteDir)
	cmd := exec.Command("scp", fmt.Sprintf("%s:%s", hostname, scpCmd), hostDir+"/")

	output, err := cmd.CombinedOutput()
	if err != nil {
		// 检查是否是因为没有匹配的文件
		if string(output) != "" {
			fmt.Printf("   [WARNING] ⚠️  %s: %s\n", hostname, string(output))
		} else {
			fmt.Printf("   [WARNING] ⚠️  %s: No report files found or scp failed: %v\n", hostname, err)
		}
		return
	}

	// 计算收集到的文件数量
	files, err := filepath.Glob(filepath.Join(hostDir, "*.json"))
	if err != nil {
		fmt.Printf("   [ERROR] ❌ %s: Error counting files: %v\n", hostname, err)
		return
	}

	if len(files) > 0 {
		fmt.Printf("   [SUCCESS] ✅ %s: Collected %d report files\n", hostname, len(files))
	} else {
		fmt.Printf("   [INFO] ℹ️  %s: No report files found\n", hostname)
	}
}
