#!/bin/bash
# HTTP Server API Tests using curl
# Usage: bash config.curls

BASE_URL="http://localhost:8080"
API_URL="${BASE_URL}/api"

echo "=========================================="
echo "xnetperf HTTP API Tests with curl"
echo "=========================================="
echo ""

###############################################################################
echo "1. Health Check"
###############################################################################
echo "GET ${BASE_URL}/health"
curl -X GET "${BASE_URL}/health" | jq
echo -e "\n"

###############################################################################
echo "2. Get all config files"
###############################################################################
echo "GET ${API_URL}/configs"
curl -X GET "${API_URL}/configs" | jq
echo -e "\n"

###############################################################################
echo "3. Get default config"
###############################################################################
echo "GET ${API_URL}/configs/config.yaml"
curl -X GET "${API_URL}/configs/config.yaml" | jq
echo -e "\n"

###############################################################################
echo "4. Create a new config file (with all fields)"
###############################################################################
echo "POST ${API_URL}/configs"
curl -X POST "${API_URL}/configs" \
  -H "Content-Type: application/json" \
  -d '{
    "name": "test-config.yaml",
    "config": {
      "start_port": 20000,
      "stream_type": "fullmesh",
      "qp_num": 10,
      "message_size_bytes": 8388608,
      "output_base": "./generated_scripts",
      "waiting_time_seconds": 15,
      "speed": 400,
      "rdma_cm": false,
      "report": {
        "enable": true,
        "dir": "/root"
      },
      "run": {
        "infinitely": true,
        "duration_seconds": 10
      },
      "server": {
        "hostname": ["server-001", "server-002"],
        "hca": ["mlx5_0", "mlx5_1"]
      },
      "client": {
        "hostname": ["client-001", "client-002"],
        "hca": ["mlx5_0", "mlx5_1"]
      }
    }
  }' | jq
echo -e "\n"

###############################################################################
echo "5. Create another config file (minimal fields, defaults will be applied)"
###############################################################################
echo "POST ${API_URL}/configs"
curl -X POST "${API_URL}/configs" \
  -H "Content-Type: application/json" \
  -d '{
    "name": "prod-config.yaml",
    "config": {
      "stream_type": "p2p",
      "server": {
        "hostname": ["prod-server-001"],
        "hca": ["mlx5_0"]
      },
      "client": {
        "hostname": ["prod-client-001"],
        "hca": ["mlx5_0"]
      }
    }
  }' | jq
echo -e "\n"

###############################################################################
echo "6. Get the newly created config"
###############################################################################
echo "GET ${API_URL}/configs/test-config.yaml"
curl -X GET "${API_URL}/configs/test-config.yaml" | jq
echo -e "\n"

###############################################################################
echo "7. Update an existing config file (with all fields)"
###############################################################################
echo "PUT ${API_URL}/configs/test-config.yaml"
curl -X PUT "${API_URL}/configs/test-config.yaml" \
  -H "Content-Type: application/json" \
  -d '{
    "start_port": 21000,
    "stream_type": "incast",
    "qp_num": 20,
    "message_size_bytes": 16777216,
    "output_base": "./generated_scripts",
    "waiting_time_seconds": 20,
    "speed": 200,
    "rdma_cm": true,
    "report": {
      "enable": true,
      "dir": "/tmp/reports"
    },
    "run": {
      "infinitely": false,
      "duration_seconds": 30
    },
    "server": {
      "hostname": ["server-001", "server-002", "server-003"],
      "hca": ["mlx5_0", "mlx5_1", "mlx5_2"]
    },
    "client": {
      "hostname": ["client-001", "client-002"],
      "hca": ["mlx5_0", "mlx5_1"]
    }
  }' | jq
echo -e "\n"

###############################################################################
echo "8. Update default config (should work)"
###############################################################################
echo "PUT ${API_URL}/configs/config.yaml"
curl -X PUT "${API_URL}/configs/config.yaml" \
  -H "Content-Type: application/json" \
  -d '{
    "start_port": 20000,
    "stream_type": "p2p",
    "qp_num": 10,
    "message_size_bytes": 4096,
    "output_base": "./generated_scripts",
    "waiting_time_seconds": 15,
    "speed": 400,
    "rdma_cm": false,
    "report": {
      "enable": true,
      "dir": "/root"
    },
    "run": {
      "infinitely": true,
      "duration_seconds": 10
    },
    "server": {
      "hostname": ["cetus-g88-094", "cetus-g88-065"],
      "hca": ["mlx5_0", "mlx5_1"]
    },
    "client": {
      "hostname": ["cetus-g88-061", "cetus-g88-062"],
      "hca": ["mlx5_0", "mlx5_1"]
    }
  }' | jq
echo -e "\n"

###############################################################################
echo "9. Delete a config file"
###############################################################################
echo "DELETE ${API_URL}/configs/test-config.yaml"
curl -X DELETE "${API_URL}/configs/test-config.yaml" | jq
echo -e "\n"

###############################################################################
echo "10. Try to delete default config (should fail)"
###############################################################################
echo "DELETE ${API_URL}/configs/config.yaml"
curl -X DELETE "${API_URL}/configs/config.yaml" | jq
echo -e "\n"

###############################################################################
echo "11. Get non-existent config (should return 404)"
###############################################################################
echo "GET ${API_URL}/configs/nonexistent.yaml"
curl -X GET "${API_URL}/configs/nonexistent.yaml" | jq
echo -e "\n"

###############################################################################
echo "12. Create config with invalid name (should fail)"
###############################################################################
echo "POST ${API_URL}/configs"
curl -X POST "${API_URL}/configs" \
  -H "Content-Type: application/json" \
  -d '{
    "name": "invalid-config.txt",
    "config": {
      "start_port": 20000,
      "stream_type": "p2p",
      "qp_num": 10,
      "message_size_bytes": 4096,
      "output_base": "./generated_scripts",
      "waiting_time_seconds": 15,
      "speed": 400,
      "rdma_cm": false,
      "report": {
        "enable": true,
        "dir": "/root"
      },
      "run": {
        "infinitely": false,
        "duration_seconds": 10
      },
      "server": {
        "hostname": ["server-001"],
        "hca": ["mlx5_0"]
      },
      "client": {
        "hostname": ["client-001"],
        "hca": ["mlx5_0"]
      }
    }
  }' | jq
echo -e "\n"

###############################################################################
echo "13. Create config with missing fields (should fail)"
###############################################################################
echo "POST ${API_URL}/configs"
curl -X POST "${API_URL}/configs" \
  -H "Content-Type: application/json" \
  -d '{
    "name": "incomplete.yaml"
  }' | jq
echo -e "\n"

###############################################################################
echo "14. Delete non-existent config (should return 404)"
###############################################################################
echo "DELETE ${API_URL}/configs/nonexistent.yaml"
curl -X DELETE "${API_URL}/configs/nonexistent.yaml" | jq
echo -e "\n"

###############################################################################
echo "15. Validate default config (should succeed)"
###############################################################################
echo "POST ${API_URL}/configs/config.yaml/validate"
curl -X POST "${API_URL}/configs/config.yaml/validate" | jq
echo -e "\n"

###############################################################################
echo "16. Validate custom config (should succeed)"
###############################################################################
echo "POST ${API_URL}/configs/test-config.yaml/validate"
curl -X POST "${API_URL}/configs/test-config.yaml/validate" | jq
echo -e "\n"

###############################################################################
echo "17. Validate non-existent config (should return 404)"
###############################################################################
echo "POST ${API_URL}/configs/nonexistent.yaml/validate"
curl -X POST "${API_URL}/configs/nonexistent.yaml/validate" | jq
echo -e "\n"

echo "=========================================="
echo "All tests completed!"
echo "=========================================="
